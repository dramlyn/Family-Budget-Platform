package fbp.performance;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicInteger;

@DisplayName("Security Performance Load Tests")
public class SecurityLoadTest {

    @Test
    @DisplayName("Authentication Load Test - 300 –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞")
    void authenticationLoadTest() throws InterruptedException {
        System.out.println("=== AUTHENTICATION LOAD TEST ===");
        
        int totalLogins = 300;
        ExecutorService executor = Executors.newFixedThreadPool(20);
        AtomicInteger successfulLogins = new AtomicInteger(0);
        AtomicInteger failedLogins = new AtomicInteger(0);
        AtomicInteger blockedAttempts = new AtomicInteger(0);
        
        long startTime = System.currentTimeMillis();
        
        for (int i = 0; i < totalLogins; i++) {
            final int attemptId = i + 1;
            executor.submit(() -> {
                try {
                    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    Thread.sleep(150 + (long)(Math.random() * 100)); // 150-250ms
                    
                    // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                    double scenario = Math.random();
                    
                    if (scenario < 0.85) {
                        // 85% —É—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤
                        successfulLogins.incrementAndGet();
                        if (attemptId % 50 == 0) {
                            System.out.println("‚úÖ –ü–æ–ø—ã—Ç–∫–∞ " + attemptId + " - —É—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥");
                        }
                    } else if (scenario < 0.95) {
                        // 10% –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                        failedLogins.incrementAndGet();
                        if (attemptId % 50 == 0) {
                            System.out.println("‚ùå –ü–æ–ø—ã—Ç–∫–∞ " + attemptId + " - –Ω–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                        }
                    } else {
                        // 5% –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫)
                        blockedAttempts.incrementAndGet();
                        Thread.sleep(500); // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                        System.out.println("üö´ –ü–æ–ø—ã—Ç–∫–∞ " + attemptId + " - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞");
                    }
                    
                } catch (InterruptedException e) {
                    failedLogins.incrementAndGet();
                }
            });
        }
        
        executor.shutdown();
        executor.awaitTermination(120, TimeUnit.SECONDS);
        
        long totalTime = System.currentTimeMillis() - startTime;
        
        System.out.println("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò ===");
        System.out.println("–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞: " + totalLogins);
        System.out.println("–£—Å–ø–µ—à–Ω—ã—Ö –≤—Ö–æ–¥–æ–≤: " + successfulLogins.get());
        System.out.println("–ù–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: " + failedLogins.get());
        System.out.println("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫: " + blockedAttempts.get());
        System.out.println("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏: " + (successfulLogins.get() * 100.0 / totalLogins) + "%");
        System.out.println("–û–±—â–µ–µ –≤—Ä–µ–º—è: " + totalTime + " –º—Å");
        System.out.println("–í—Ö–æ–¥–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: " + String.format("%.2f", successfulLogins.get() * 1000.0 / totalTime));
        
        if (successfulLogins.get() >= totalLogins * 0.8) {
            System.out.println("üéâ –û—Ç–ª–∏—á–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!");
        }
    }

    @Test
    @DisplayName("JWT Token Validation - 500 –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤")
    void jwtValidationLoadTest() throws InterruptedException {
        System.out.println("\n=== JWT TOKEN VALIDATION LOAD TEST ===");
        
        int totalValidations = 500;
        ExecutorService executor = Executors.newFixedThreadPool(25);
        AtomicInteger validTokens = new AtomicInteger(0);
        AtomicInteger expiredTokens = new AtomicInteger(0);
        AtomicInteger invalidTokens = new AtomicInteger(0);
        
        for (int i = 0; i < totalValidations; i++) {
            executor.submit(() -> {
                try {
                    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ JWT —Ç–æ–∫–µ–Ω–∞
                    Thread.sleep(10 + (long)(Math.random() * 30)); // 10-40ms
                    
                    double tokenType = Math.random();
                    
                    if (tokenType < 0.90) {
                        // 90% –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                        validTokens.incrementAndGet();
                    } else if (tokenType < 0.97) {
                        // 7% –∏—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤
                        expiredTokens.incrementAndGet();
                    } else {
                        // 3% –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                        invalidTokens.incrementAndGet();
                    }
                    
                } catch (InterruptedException e) {
                    invalidTokens.incrementAndGet();
                }
            });
        }
        
        executor.shutdown();
        executor.awaitTermination(60, TimeUnit.SECONDS);
        
        System.out.println("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Ç–æ–∫–µ–Ω–æ–≤: " + totalValidations);
        System.out.println("–í–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: " + validTokens.get());
        System.out.println("–ò—Å—Ç–µ–∫—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤: " + expiredTokens.get());
        System.out.println("–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: " + invalidTokens.get());
        System.out.println("–ü—Ä–æ—Ü–µ–Ω—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏: " + (validTokens.get() * 100.0 / totalValidations) + "%");
        
        if (validTokens.get() >= totalValidations * 0.85) {
            System.out.println("–ë—ã—Å—Ç—Ä–∞—è –∏ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤!");
        }
    }

    @Test
    @DisplayName("Role-Based Access Control - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    void rbacLoadTest() throws InterruptedException {
        System.out.println("\n=== ROLE-BASED ACCESS CONTROL LOAD TEST ===");
        
        String[] roles = {"ADMIN", "USER", "FAMILY_HEAD", "FAMILY_MEMBER", "GUEST"};
        String[] resources = {"/api/admin", "/api/users", "/api/families", "/api/transactions", "/api/reports"};
        
        int totalChecks = 400;
        ExecutorService executor = Executors.newFixedThreadPool(20);
        AtomicInteger allowedAccess = new AtomicInteger(0);
        AtomicInteger deniedAccess = new AtomicInteger(0);
        AtomicInteger roleErrors = new AtomicInteger(0);
        
        for (int i = 0; i < totalChecks; i++) {
            final String role = roles[i % roles.length];
            final String resource = resources[i % resources.length];
            
            executor.submit(() -> {
                try {
                    // –°–∏–º—É–ª—è—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
                    Thread.sleep(5 + (long)(Math.random() * 20)); // 5-25ms
                    
                    // –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
                    boolean hasAccess = checkAccess(role, resource);
                    
                    if (hasAccess) {
                        allowedAccess.incrementAndGet();
                    } else {
                        deniedAccess.incrementAndGet();
                    }
                    
                } catch (Exception e) {
                    roleErrors.incrementAndGet();
                }
            });
        }
        
        executor.shutdown();
        executor.awaitTermination(60, TimeUnit.SECONDS);
        
        System.out.println("–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ—Å—Ç—É–ø–∞: " + totalChecks);
        System.out.println("–†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: " + allowedAccess.get());
        System.out.println("–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø: " + deniedAccess.get());
        System.out.println("–û—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏: " + roleErrors.get());
        System.out.println("–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: " + ((allowedAccess.get() + deniedAccess.get()) * 100.0 / totalChecks) + "%");
        
        if (roleErrors.get() < totalChecks * 0.05) {
            System.out.println("–ù–∞–¥–µ–∂–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –¥–æ—Å—Ç—É–ø–∞!");
        }
    }

    @Test
    @DisplayName("Session Management - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏")
    void sessionManagementTest() throws InterruptedException {
        System.out.println("\n=== SESSION MANAGEMENT LOAD TEST ===");
        
        int totalSessions = 100;
        ExecutorService executor = Executors.newFixedThreadPool(15);
        AtomicInteger activeSessions = new AtomicInteger(0);
        AtomicInteger expiredSessions = new AtomicInteger(0);
        AtomicInteger invalidSessions = new AtomicInteger(0);
        
        // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–π
        for (int i = 0; i < totalSessions; i++) {
            final int sessionId = i + 1;
            executor.submit(() -> {
                try {
                    // –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                    Thread.sleep(50 + (long)(Math.random() * 50)); // 50-100ms
                    activeSessions.incrementAndGet();
                    
                    // –°–∏–º—É–ª—è—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ —Å–µ—Å—Å–∏–∏
                    int sessionDuration = 1000 + (int)(Math.random() * 3000); // 1-4 —Å–µ–∫—É–Ω–¥—ã
                    Thread.sleep(sessionDuration);
                    
                    // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
                    double endType = Math.random();
                    activeSessions.decrementAndGet();
                    
                    if (endType < 0.85) {
                        // 85% –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        if (sessionId % 20 == 0) {
                            System.out.println("‚úÖ –°–µ—Å—Å–∏—è " + sessionId + " –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–æ");
                        }
                    } else if (endType < 0.95) {
                        // 10% –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
                        expiredSessions.incrementAndGet();
                        if (sessionId % 20 == 0) {
                            System.out.println("‚è∞ –°–µ—Å—Å–∏—è " + sessionId + " –∏—Å—Ç–µ–∫–ª–∞");
                        }
                    } else {
                        // 5% –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        invalidSessions.incrementAndGet();
                        System.out.println("‚ùå –°–µ—Å—Å–∏—è " + sessionId + " –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");
                    }
                    
                } catch (InterruptedException e) {
                    activeSessions.decrementAndGet();
                    invalidSessions.incrementAndGet();
                }
            });
        }
        
        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
        for (int i = 0; i < 30; i++) {
            Thread.sleep(200);
            if (i % 10 == 0) {
                System.out.println("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: " + activeSessions.get());
            }
        }
        
        executor.shutdown();
        executor.awaitTermination(30, TimeUnit.SECONDS);
        
        System.out.println("\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–Ø–ú–ò ===");
        System.out.println("–í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: " + totalSessions);
        System.out.println("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: " + activeSessions.get());
        System.out.println("–ò—Å—Ç–µ–∫—à–∏—Ö —Å–µ—Å—Å–∏–π: " + expiredSessions.get());
        System.out.println("–ù–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Å–µ—Å—Å–∏–π: " + invalidSessions.get());
        System.out.println("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: " + (totalSessions - activeSessions.get() - expiredSessions.get() - invalidSessions.get()));
        
        if (invalidSessions.get() < totalSessions * 0.1) {
            System.out.println("–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏");
        }
    }

    private boolean checkAccess(String role, String resource) {
        // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        switch (role) {
            case "ADMIN":
                return true; // –ê–¥–º–∏–Ω –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º—É
            case "FAMILY_HEAD":
                return !resource.equals("/api/admin"); // –í—Å–µ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
            case "USER":
            case "FAMILY_MEMBER":
                return resource.equals("/api/users") || resource.equals("/api/transactions") || resource.equals("/api/families");
            case "GUEST":
                return resource.equals("/api/users"); // –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø
            default:
                return false;
        }
    }
}